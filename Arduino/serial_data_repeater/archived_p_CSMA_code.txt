The following is the p-persistant CSMA code from serial_data_repeater.ino, from
2022-12-30. In this state, the microcontroller will only send rubbish (shown in
Visual Studio Code as replacement characters (ï¿½)); the same amount as the input
packet size.

/*
if (Serial1.available() <= 0)
    { // Perform a p-persistant CSMA check
        do
        {
            // Check for data on the serial port
            if (Serial1.available() <= 0)
                rand = random(0, 255);
            else
            { // Get data for serial1 for hostPacket.slottime * 10 milliseconds
                do
                {
                    serial1BufPos = serial1readbuffer(serial1Buffer);
                } while (!repeat(hostPacket.slottime * 10));
            }

            // If the buffer has no data, stay in the loop
            if (serial1BufPos == 0)
                rand = 0;
            else if (rand <= hostPacket.P)
            {
                // Transmit null characters for TXDELAY * 10 milliseconds
                do
                    Serial1.write("\0");
                while (repeat(hostPacket.txdelay * 10));

                // Send and erase serialBuffer
                for (unsigned int i = 0; i < serialBuffer.size(); i++)
                {
                    Serial1.write(serialBuffer[i]);
                }
                serialBufPos = 0; // Reset the array index
                serialBuffer.clear();
            }
        } while (rand > hostPacket.P);
    }

    // Repeat, sending serial1Buffer to serial0
    if (Serial.available() <= 0)
    { // Perform a p-persistant CSMA check
        do
        {
            // Check for data on the serial port
            if (Serial.available() <= 0)
                rand = random(0, 255);
            else
            { // Get data for serial1 for hostPacket.slottime * 10 milliseconds
                do
                {
                    serialBufPos = serial0readbuffer(serialBuffer);
                } while (!repeat(hostPacket.slottime) * 10);
            }

            // If the buffer has no data, stay in the loop
            if (serialBufPos == 0)
                rand = 0;
            else if (rand <= hostPacket.P)
            {
                // Transmit null characters for 10*TXDELAY milliseconds
                do
                    Serial1.write("\0");
                while (repeat(hostPacket.txdelay * 10));

                // Send and erase serialBuffer
                for (unsigned int i = 0; i < serialBuffer.size(); i++)
                {
                    Serial.write(serial1Buffer[i]);
                }
                serial1BufPos = 0; // Reset the array index
                serial1Buffer.clear();
            }
        } while (rand > hostPacket.P);
    }
*/